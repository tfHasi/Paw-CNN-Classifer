# -*- coding: utf-8 -*-
"""PredictorPipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rRyIbnOPNkGAWpgBqzvcNn4T-n5k5bvz
"""

import numpy as np
import pandas as pd
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import load_model

from google.colab import drive
drive.mount('/content/drive')

model = load_model("drive/My Drive/dog_breed_data/Paw Detector Final Model.keras")

labels = pd.read_csv("drive/My Drive/dog_breed_data/labels.csv")
train_dir = 'drive/My Drive/dog_breed_data/train/'
# Add .jpg extension ONLY if it's not already present
labels['id'] = labels['id'].apply(lambda x: x if x.endswith('.jpg') else x + '.jpg')

BATCH_SIZE = 32
IMG_SIZE = (224, 224)

# Create separate generators for training and validation
# Training generator with augmentation
train_datagen = ImageDataGenerator(
    preprocessing_function=preprocess_input,
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    fill_mode='constant',
    validation_split=0.2  # 20% Validation Split
)

# Generate the training data
train_gen = train_datagen.flow_from_dataframe(
    labels,
    directory=train_dir,
    x_col='id', y_col='breed',
    subset='training',
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

# Generate the validation data
val_gen = train_datagen.flow_from_dataframe(
    labels,
    directory=train_dir,
    x_col='id', y_col='breed',
    subset='validation',
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False
)

img_path = 'drive/My Drive/dog_breed_data/golden-retriever-dog-breed-info.jpg'
img = image.load_img(img_path, target_size=IMG_SIZE)
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)
prediction = model.predict(img_array)

predicted_class = np.argmax(prediction, axis=1)[0]
inv_class_indices = {v: k for k, v in train_gen.class_indices.items()}
predicted_label = inv_class_indices[predicted_class]

# Display the image
plt.imshow(img)
plt.title(f"Predicted Breed: {predicted_label}")
plt.axis('off')
plt.show()