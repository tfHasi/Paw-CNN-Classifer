# -*- coding: utf-8 -*-
"""PredictorPipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rRyIbnOPNkGAWpgBqzvcNn4T-n5k5bvz
"""

import numpy as np
import pandas as pd
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import load_model

from google.colab import drive
drive.mount('/content/drive')

model = load_model("drive/My Drive/dog_breed_data/Paw Detector Final Model.keras")
labels = pd.read_csv("drive/My Drive/dog_breed_data/labels.csv")
train_dir = 'drive/My Drive/dog_breed_data/train/'
labels['id'] = labels['id'].apply(lambda x: x if x.endswith('.jpg') else x + '.jpg')

IMG_SIZE = (224, 224)
inference_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

# Create class indices mapping from training data (needed for prediction labels)
train_gen = inference_datagen.flow_from_dataframe(
    labels,
    directory='drive/My Drive/dog_breed_data/train/',
    x_col='id',
    y_col='breed',
    target_size=IMG_SIZE,
    class_mode='categorical'
)
class_indices = train_gen.class_indices
inv_class_indices = {v: k for k, v in class_indices.items()}

def predict_breed(img_path):
    img = image.load_img(img_path, target_size=IMG_SIZE)
    img_array = image.img_to_array(img)
    img_array = preprocess_input(np.expand_dims(img_array, axis=0))
    preds = model.predict(img_array)[0]
    top_index = np.argmax(preds)
    breed = inv_class_indices[top_index]
    confidence = preds[top_index]

    plt.imshow(img)
    plt.title(f"Predicted Breed: {breed}\nConfidence: {confidence:.2%}")
    plt.axis('off')
    plt.show()

    return {'breed': breed, 'confidence': float(confidence)}

predict_breed('drive/My Drive/dog_breed_data/golden-retriever-dog-breed-info.jpg')